{
  "version": 3,
  "sources": ["../../@pionjs/pion/lib/interface.js", "../../@pionjs/pion/lib/symbols.js", "../../@pionjs/pion/lib/state.js", "../../@pionjs/pion/lib/scheduler.js", "../../@pionjs/pion/lib/util.js", "../../@pionjs/pion/lib/component.js", "../../@pionjs/pion/lib/hook.js", "../../@pionjs/pion/lib/create-effect.js", "../../@pionjs/pion/lib/use-effect.js", "../../@pionjs/pion/lib/use-context.js", "../../@pionjs/pion/lib/create-context.js", "../../@pionjs/pion/lib/use-memo.js", "../../@pionjs/pion/lib/use-callback.js", "../../@pionjs/pion/lib/use-layout-effect.js", "../../@pionjs/pion/lib/use-state.js", "../../@pionjs/pion/lib/use-reducer.js", "../../@pionjs/pion/lib/use-property.js", "../../@pionjs/pion/lib/use-ref.js", "../../@pionjs/pion/lib/core.js"],
  "sourcesContent": ["let current;\nlet currentId = 0;\nfunction setCurrent(state) {\n    current = state;\n}\nfunction clear() {\n    current = null;\n    currentId = 0;\n}\nfunction notify() {\n    return currentId++;\n}\nexport { clear, current, setCurrent, notify };\n", "const phaseSymbol = Symbol(\"haunted.phase\");\nconst hookSymbol = Symbol(\"haunted.hook\");\nconst updateSymbol = Symbol(\"haunted.update\");\nconst commitSymbol = Symbol(\"haunted.commit\");\nconst effectsSymbol = Symbol(\"haunted.effects\");\nconst layoutEffectsSymbol = Symbol(\"haunted.layoutEffects\");\nconst contextEvent = \"haunted.context\";\nexport { phaseSymbol, hookSymbol, updateSymbol, commitSymbol, effectsSymbol, layoutEffectsSymbol, contextEvent, };\n", "import { setCurrent, clear } from \"./interface\";\nimport { hookSymbol, effectsSymbol, layoutEffectsSymbol, } from \"./symbols\";\nclass State {\n    update;\n    host;\n    virtual;\n    [hookSymbol];\n    [effectsSymbol];\n    [layoutEffectsSymbol];\n    constructor(update, host) {\n        this.update = update;\n        this.host = host;\n        this[hookSymbol] = new Map();\n        this[effectsSymbol] = [];\n        this[layoutEffectsSymbol] = [];\n    }\n    run(cb) {\n        setCurrent(this);\n        let res = cb();\n        clear();\n        return res;\n    }\n    _runEffects(phase) {\n        let effects = this[phase];\n        setCurrent(this);\n        for (let effect of effects) {\n            effect.call(this);\n        }\n        clear();\n    }\n    runEffects() {\n        this._runEffects(effectsSymbol);\n    }\n    runLayoutEffects() {\n        this._runEffects(layoutEffectsSymbol);\n    }\n    teardown() {\n        let hooks = this[hookSymbol];\n        hooks.forEach((hook) => {\n            if (typeof hook.teardown === \"function\") {\n                hook.teardown(true);\n            }\n        });\n    }\n}\nexport { State };\n", "import { State } from \"./state\";\nimport { commitSymbol, phaseSymbol, updateSymbol, effectsSymbol, layoutEffectsSymbol, } from \"./symbols\";\nconst defer = Promise.resolve().then.bind(Promise.resolve());\nfunction runner() {\n    let tasks = [];\n    let id;\n    function runTasks() {\n        id = null;\n        let t = tasks;\n        tasks = [];\n        for (var i = 0, len = t.length; i < len; i++) {\n            t[i]();\n        }\n    }\n    return function (task) {\n        tasks.push(task);\n        if (id == null) {\n            id = defer(runTasks);\n        }\n    };\n}\nconst read = runner();\nconst write = runner();\nclass BaseScheduler {\n    renderer;\n    host;\n    state;\n    [phaseSymbol];\n    _updateQueued;\n    _active;\n    constructor(renderer, host) {\n        this.renderer = renderer;\n        this.host = host;\n        this.state = new State(this.update.bind(this), host);\n        this[phaseSymbol] = null;\n        this._updateQueued = false;\n        this._active = true;\n    }\n    update() {\n        if (!this._active)\n            return;\n        if (this._updateQueued)\n            return;\n        read(() => {\n            let result = this.handlePhase(updateSymbol);\n            write(() => {\n                this.handlePhase(commitSymbol, result);\n                write(() => {\n                    this.handlePhase(effectsSymbol);\n                });\n            });\n            this._updateQueued = false;\n        });\n        this._updateQueued = true;\n    }\n    handlePhase(phase, arg) {\n        this[phaseSymbol] = phase;\n        switch (phase) {\n            case commitSymbol:\n                this.commit(arg);\n                this.runEffects(layoutEffectsSymbol);\n                return;\n            case updateSymbol:\n                return this.render();\n            case effectsSymbol:\n                return this.runEffects(effectsSymbol);\n        }\n    }\n    render() {\n        return this.state.run(() => this.renderer.call(this.host, this.host));\n    }\n    runEffects(phase) {\n        this.state._runEffects(phase);\n    }\n    teardown() {\n        this.state.teardown();\n    }\n    pause() {\n        this._active = false;\n    }\n    resume() {\n        this._active = true;\n    }\n}\nexport { BaseScheduler };\n", "export const sheet = (...styles) => {\n    const cs = new CSSStyleSheet();\n    cs.replaceSync(styles.join(\"\"));\n    return cs;\n};\nexport const sheets = (styleSheets) => styleSheets?.map((style) => {\n    if (typeof style === \"string\")\n        return sheet(style);\n    return style;\n});\nexport const tagged = (strings, ...values) => strings.flatMap((s, i) => [s, values[i] || \"\"]).join(\"\");\nexport const css = tagged;\n", "import { BaseScheduler } from \"./scheduler\";\nimport { sheets } from \"./util\";\nconst toCamelCase = (val = \"\") => val.replace(/-+([a-z])?/g, (_, char) => (char ? char.toUpperCase() : \"\"));\nfunction makeComponent(render) {\n    class Scheduler extends BaseScheduler {\n        frag;\n        renderResult;\n        constructor(renderer, frag, host) {\n            super(renderer, (host || frag));\n            this.frag = frag;\n        }\n        commit(result) {\n            this.renderResult = render(result, this.frag);\n        }\n    }\n    function component(renderer, baseElementOrOptions, options) {\n        const BaseElement = (options || baseElementOrOptions || {}).baseElement ||\n            HTMLElement;\n        const { observedAttributes = [], useShadowDOM = true, shadowRootInit = {}, styleSheets: _styleSheets, } = options || baseElementOrOptions || {};\n        const styleSheets = sheets(renderer.styleSheets || _styleSheets);\n        class Element extends BaseElement {\n            _scheduler;\n            static get observedAttributes() {\n                return renderer.observedAttributes || observedAttributes || [];\n            }\n            constructor() {\n                super();\n                if (useShadowDOM === false) {\n                    this._scheduler = new Scheduler(renderer, this);\n                }\n                else {\n                    const shadowRoot = this.attachShadow({\n                        mode: \"open\",\n                        ...shadowRootInit,\n                    });\n                    if (styleSheets)\n                        shadowRoot.adoptedStyleSheets = styleSheets;\n                    this._scheduler = new Scheduler(renderer, shadowRoot, this);\n                }\n            }\n            connectedCallback() {\n                this._scheduler.resume();\n                this._scheduler.update();\n                this._scheduler.renderResult?.setConnected(true);\n            }\n            disconnectedCallback() {\n                this._scheduler.pause();\n                this._scheduler.teardown();\n                this._scheduler.renderResult?.setConnected(false);\n            }\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (oldValue === newValue) {\n                    return;\n                }\n                let val = newValue === \"\" ? true : newValue;\n                Reflect.set(this, toCamelCase(name), val);\n            }\n        }\n        function reflectiveProp(initialValue) {\n            let value = initialValue;\n            let isSetup = false;\n            return Object.freeze({\n                enumerable: true,\n                configurable: true,\n                get() {\n                    return value;\n                },\n                set(newValue) {\n                    // Avoid scheduling update when prop value hasn't changed\n                    if (isSetup && value === newValue)\n                        return;\n                    isSetup = true;\n                    value = newValue;\n                    if (this._scheduler) {\n                        this._scheduler.update();\n                    }\n                },\n            });\n        }\n        const proto = new Proxy(BaseElement.prototype, {\n            getPrototypeOf(target) {\n                return target;\n            },\n            set(target, key, value, receiver) {\n                let desc;\n                if (key in target) {\n                    desc = Object.getOwnPropertyDescriptor(target, key);\n                    if (desc && desc.set) {\n                        desc.set.call(receiver, value);\n                        return true;\n                    }\n                    Reflect.set(target, key, value, receiver);\n                    return true;\n                }\n                if (typeof key === \"symbol\" || key[0] === \"_\") {\n                    desc = {\n                        enumerable: true,\n                        configurable: true,\n                        writable: true,\n                        value,\n                    };\n                }\n                else {\n                    desc = reflectiveProp(value);\n                }\n                Object.defineProperty(receiver, key, desc);\n                if (desc.set) {\n                    desc.set.call(receiver, value);\n                }\n                return true;\n            },\n        });\n        Object.setPrototypeOf(Element.prototype, proto);\n        return Element;\n    }\n    return component;\n}\nexport { makeComponent, };\n", "import { current, notify } from \"./interface\";\nimport { hookSymbol } from \"./symbols\";\nclass Hook {\n    id;\n    state;\n    constructor(id, state) {\n        this.id = id;\n        this.state = state;\n    }\n}\nfunction use(Hook, ...args) {\n    let id = notify();\n    let hooks = current[hookSymbol];\n    let hook = hooks.get(id);\n    if (!hook) {\n        hook = new Hook(id, current, ...args);\n        hooks.set(id, hook);\n    }\n    return hook.update(...args);\n}\nfunction hook(Hook) {\n    return use.bind(null, Hook);\n}\nexport { hook, Hook };\n", "import { Hook, hook } from \"./hook\";\nfunction createEffect(setEffects) {\n    return hook(class extends Hook {\n        callback;\n        lastValues;\n        values;\n        _teardown;\n        constructor(id, state, ignored1, ignored2) {\n            super(id, state);\n            setEffects(state, this);\n        }\n        update(callback, values) {\n            this.callback = callback;\n            this.values = values;\n        }\n        call() {\n            const hasChanged = !this.values || this.hasChanged();\n            this.lastValues = this.values;\n            if (hasChanged) {\n                this.run();\n            }\n        }\n        run() {\n            this.teardown();\n            this._teardown = this.callback.call(this.state);\n        }\n        teardown(disconnected) {\n            if (typeof this._teardown === \"function\") {\n                this._teardown();\n                // ensure effect is not torn down multiple times\n                this._teardown = undefined;\n            }\n            // reset to pristine state when element is disconnected\n            if (disconnected) {\n                this.lastValues = this.values = undefined;\n            }\n        }\n        hasChanged() {\n            return (!this.lastValues ||\n                this.values.some((value, i) => this.lastValues[i] !== value));\n        }\n    });\n}\nexport { createEffect };\n", "import { effectsSymbol } from \"./symbols\";\nimport { createEffect } from \"./create-effect\";\nfunction setEffects(state, cb) {\n    state[effectsSymbol].push(cb);\n}\n/**\n * @function\n * @param {() => void} effect - callback function that runs each time dependencies change\n * @param {unknown[]} [dependencies] - list of dependencies to the effect\n * @return {void}\n */\nconst useEffect = createEffect(setEffects);\nexport { setEffects, useEffect };\n", "import { hook, Hook } from \"./hook\";\nimport { contextEvent } from \"./symbols\";\nimport { setEffects } from \"./use-effect\";\nconst getEmitter = (host) => {\n    if (host instanceof Element)\n        return host;\n    return host.startNode || host.endNode || host.parentNode;\n};\n/**\n * @function\n * @template T\n * @param    {Context<T>} context\n * @return   {T}\n */\nconst useContext = hook(class extends Hook {\n    Context;\n    value;\n    _ranEffect;\n    _unsubscribe;\n    constructor(id, state, _) {\n        super(id, state);\n        this._updater = this._updater.bind(this);\n        this._ranEffect = false;\n        this._unsubscribe = null;\n        setEffects(state, this);\n    }\n    update(Context) {\n        if (this.Context !== Context) {\n            this._subscribe(Context);\n            this.Context = Context;\n        }\n        return this.value;\n    }\n    call() {\n        if (!this._ranEffect) {\n            this._ranEffect = true;\n            if (this._unsubscribe)\n                this._unsubscribe();\n            this._subscribe(this.Context);\n            this.state.update();\n        }\n    }\n    _updater(value) {\n        this.value = value;\n        this.state.update();\n    }\n    _subscribe(Context) {\n        const detail = { Context, callback: this._updater };\n        const emitter = getEmitter(this.state.host);\n        emitter.dispatchEvent(new CustomEvent(contextEvent, {\n            detail, // carrier\n            bubbles: true, // to bubble up in tree\n            cancelable: true, // to be able to cancel\n            composed: true, // to pass ShadowDOM boundaries\n        }));\n        const { unsubscribe = null, value } = detail;\n        this.value = unsubscribe ? value : Context.defaultValue;\n        this._unsubscribe = unsubscribe;\n    }\n    teardown() {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n    }\n});\nexport { useContext };\n", "import { contextEvent } from \"./symbols\";\nimport { useContext } from \"./use-context\";\nfunction makeContext(component) {\n    return (defaultValue) => {\n        const Context = {\n            Provider: class extends HTMLElement {\n                listeners;\n                _value;\n                constructor() {\n                    super();\n                    this.style.display = \"contents\";\n                    this.listeners = new Set();\n                    this.addEventListener(contextEvent, this);\n                }\n                disconnectedCallback() {\n                    this.removeEventListener(contextEvent, this);\n                }\n                handleEvent(event) {\n                    const { detail } = event;\n                    if (detail.Context === Context) {\n                        detail.value = this.value;\n                        detail.unsubscribe = this.unsubscribe.bind(this, detail.callback);\n                        this.listeners.add(detail.callback);\n                        event.stopPropagation();\n                    }\n                }\n                unsubscribe(callback) {\n                    this.listeners.delete(callback);\n                }\n                set value(value) {\n                    this._value = value;\n                    for (let callback of this.listeners) {\n                        callback(value);\n                    }\n                }\n                get value() {\n                    return this._value;\n                }\n            },\n            Consumer: component(function ({ render }) {\n                const context = useContext(Context);\n                return render(context);\n            }, { useShadowDOM: false }),\n            defaultValue,\n        };\n        return Context;\n    };\n}\nexport { makeContext };\n", "import { hook, Hook } from \"./hook\";\n/**\n * @function\n * @template T\n * @param  {() => T} fn function to memoize\n * @param  {unknown[]} values dependencies to the memoized computation\n * @return {T} The next computed value\n */\nconst useMemo = hook(class extends Hook {\n    value;\n    values;\n    constructor(id, state, fn, values) {\n        super(id, state);\n        this.value = fn();\n        this.values = values;\n    }\n    update(fn, values) {\n        if (this.hasChanged(values)) {\n            this.values = values;\n            this.value = fn();\n        }\n        return this.value;\n    }\n    hasChanged(values = []) {\n        return values.some((value, i) => this.values[i] !== value);\n    }\n});\nexport { useMemo };\n", "import { useMemo } from \"./use-memo\";\n/**\n * @function\n * @template {Function} T\n * @param    {T} fn - callback to memoize\n * @param    {unknown[]} inputs - dependencies to callback memoization\n * @return   {T}\n */\nconst useCallback = (fn, inputs) => useMemo(() => fn, inputs);\nexport { useCallback };\n", "import { layoutEffectsSymbol } from \"./symbols\";\nimport { createEffect } from \"./create-effect\";\nfunction setLayoutEffects(state, cb) {\n    state[layoutEffectsSymbol].push(cb);\n}\n/**\n * @function\n * @param  {Effect} callback effecting callback\n * @param  {unknown[]} [values] dependencies to the effect\n * @return {void}\n */\nconst useLayoutEffect = createEffect(setLayoutEffects);\nexport { useLayoutEffect };\n", "import { hook, Hook } from \"./hook\";\n/**\n * @function\n * @template {*} T\n * @param {T} [initialState] - Optional initial state\n * @return {StateTuple<T>} stateTuple - Tuple of current state and state updater function\n */\nconst useState = hook(class extends Hook {\n    args;\n    constructor(id, state, initialValue) {\n        super(id, state);\n        this.updater = this.updater.bind(this);\n        if (typeof initialValue === \"function\") {\n            const initFn = initialValue;\n            initialValue = initFn();\n        }\n        this.makeArgs(initialValue);\n    }\n    update() {\n        return this.args;\n    }\n    updater(value) {\n        const [previousValue] = this.args;\n        if (typeof value === \"function\") {\n            const updaterFn = value;\n            value = updaterFn(previousValue);\n        }\n        if (Object.is(previousValue, value)) {\n            return;\n        }\n        this.makeArgs(value);\n        this.state.update();\n    }\n    makeArgs(value) {\n        this.args = Object.freeze([value, this.updater]);\n    }\n});\nexport { useState };\n", "import { hook, Hook } from \"./hook\";\n/**\n * Given a reducer function, initial state, and optional state initializer function, returns a tuple of state and dispatch function.\n * @function\n * @template S State\n * @template I Initial State\n * @template A Action\n * @param {Reducer<S, A>} reducer - reducer function to compute the next state given the previous state and the action\n * @param {I} initialState - the initial state of the reducer\n * @param {(init: I) => S} [init=undefined] - Optional initializer function, called on initialState if provided\n * @return {readonly [S, (action: A) => void]}\n */\nconst useReducer = hook(class extends Hook {\n    reducer;\n    currentState;\n    constructor(id, state, _, initialState, init) {\n        super(id, state);\n        this.dispatch = this.dispatch.bind(this);\n        this.currentState =\n            init !== undefined ? init(initialState) : initialState;\n    }\n    update(reducer) {\n        this.reducer = reducer;\n        return [this.currentState, this.dispatch];\n    }\n    dispatch(action) {\n        this.currentState = this.reducer(this.currentState, action);\n        this.state.update();\n    }\n});\nexport { useReducer };\n", "import { hook, Hook } from \"./hook\";\nconst UPPER = /([A-Z])/gu;\nexport const useProperty = hook(class extends Hook {\n    property;\n    eventName;\n    constructor(id, state, property, initialValue) {\n        super(id, state);\n        if (this.state.virtual) {\n            throw new Error(\"Can't be used with virtual components.\");\n        }\n        this.updater = this.updater.bind(this);\n        this.property = property;\n        this.eventName =\n            property.replace(UPPER, \"-$1\").toLowerCase() + \"-changed\";\n        // set the initial value only if it was not already set by the parent\n        if (this.state.host[this.property] != null)\n            return;\n        if (typeof initialValue === \"function\") {\n            const initFn = initialValue;\n            initialValue = initFn();\n        }\n        if (initialValue == null)\n            return;\n        this.updateProp(initialValue);\n    }\n    update(ignored, ignored2) {\n        return [this.state.host[this.property], this.updater];\n    }\n    updater(value) {\n        const previousValue = this.state.host[this.property];\n        if (typeof value === \"function\") {\n            const updaterFn = value;\n            value = updaterFn(previousValue);\n        }\n        if (Object.is(previousValue, value)) {\n            return;\n        }\n        this.updateProp(value);\n    }\n    updateProp(value) {\n        const ev = this.notify(value);\n        if (ev.defaultPrevented)\n            return;\n        this.state.host[this.property] = value;\n    }\n    notify(value) {\n        const ev = new CustomEvent(this.eventName, {\n            detail: { value, path: this.property },\n            cancelable: true,\n        });\n        this.state.host.dispatchEvent(ev);\n        return ev;\n    }\n});\nexport const lift = (setter) => (ev) => {\n    ev.preventDefault();\n    setter(ev.detail.value);\n};\n", "import { useMemo } from \"./use-memo\";\nexport function useRef(initialValue) {\n    return useMemo(() => ({\n        current: initialValue,\n    }), []);\n}\n", "import { makeComponent } from \"./component\";\nimport { makeContext } from \"./create-context\";\nfunction pion({ render }) {\n    const component = makeComponent(render);\n    const createContext = makeContext(component);\n    return { component, createContext };\n}\nexport { pion as default, };\nexport { useCallback } from \"./use-callback\";\nexport { useEffect } from \"./use-effect\";\nexport { useLayoutEffect } from \"./use-layout-effect\";\nexport { useState } from \"./use-state\";\nexport { useReducer } from \"./use-reducer\";\nexport { useMemo } from \"./use-memo\";\nexport { useContext } from \"./use-context\";\nexport { useProperty, lift } from \"./use-property\";\nexport { useRef } from \"./use-ref\";\nexport { hook, Hook } from \"./hook\";\nexport { BaseScheduler } from \"./scheduler\";\nexport { State } from \"./state\";\n"],
  "mappings": "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",
  "names": ["hook", "Element", "Hook", "hook", "setEffects"]
}
